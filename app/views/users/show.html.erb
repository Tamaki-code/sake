<div class="user-profile-container">
  <div class="user-profile-box">
    <div class="user-profile-header">
      <h2>マイページ</h2>
      <button class="settings-button" data-bs-toggle="modal" data-bs-target="#settingsModal">
        <i class="fas fa-cog"></i>
      </button>
    </div>
    <div class="user-profile-details">
      <p><strong>ユーザー名:</strong> <%= @user.username %></p>
      <p><strong>性別:</strong> <%= @user.gender %></p>
      <p><strong>生年月日:</strong> <%= @user.birthdate %></p>
      <p><strong>コメント:</strong> <%= @user.comment %></p>
      <p><strong>アカウント作成日:</strong> <%= @user.created_at.strftime("%Y-%m-%d %H:%M") %></p>
      <p><strong>最終更新日:</strong> <%= @user.updated_at.strftime("%Y-%m-%d %H:%M") %></p>
    </div>
  </div>
</div>

<!-- 設定ボタンをクリックしたときに表示されるモーダル -->
<div class="modal fade" id="settingsModal" tabindex="-1" aria-labelledby="settingsModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="settingsModalLabel">設定</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <%= link_to '編集', edit_user_registration_path, class: 'btn btn-custom' %>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('turbo:before-cache', function() {
    var settingsModal = document.getElementById('settingsModal');
    if (settingsModal) {
      var modal = bootstrap.Modal.getInstance(settingsModal);
      if (modal) {
        modal.hide(); // モーダルを確実に閉じる
      }

      removeBackdrop(); // バックドロップを削除
    }
  });

  document.addEventListener('turbo:load', function() {
    var settingsModal = document.getElementById('settingsModal');
    if (settingsModal) {
      var modal = new bootstrap.Modal(settingsModal);

      // イベントリスナーを削除してから再追加
      settingsModal.removeEventListener('hidden.bs.modal', handleModalClose);
      settingsModal.addEventListener('hidden.bs.modal', handleModalClose);
    }

    function handleModalClose() {
      removeBackdrop();
    }

    function removeBackdrop() {
      var backdrops = document.querySelectorAll('.modal-backdrop');
      backdrops.forEach(function(backdrop) {
        backdrop.parentNode.removeChild(backdrop);
      });
    }
  });
</script>

<%# <script>
  document.addEventListener('turbo:load', function() {
    var settingsModal = document.getElementById('settingsModal');

    if (settingsModal) {
      var modal = new bootstrap.Modal(settingsModal);

      // モーダルが開いている場合は閉じる
      if (settingsModal.classList.contains('show')) {
        modal.hide();
      }

      // イベントリスナーを追加する前に確実に削除
      settingsModal.removeEventListener('hidden.bs.modal', handleModalClose);
      settingsModal.addEventListener('hidden.bs.modal', handleModalClose);
    }
  });

  window.addEventListener('popstate', function() {
    var settingsModal = document.getElementById('settingsModal');
    if (settingsModal) {
      var modal = bootstrap.Modal.getInstance(settingsModal);
      if (modal) {
        modal.hide();
        removeBackdrop();
      }
    }
  });

  document.addEventListener('turbo:before-cache', function() {
    var settingsModal = document.getElementById('settingsModal');
    if (settingsModal) {
      var modal = bootstrap.Modal.getInstance(settingsModal);
      if (modal) {
        modal.hide();
        removeBackdrop();
      }
    }
  });

  function handleModalClose() {
    removeBackdrop();
  }

  function removeBackdrop() {
    var backdrops = document.querySelectorAll('.modal-backdrop');
    backdrops.forEach(function(backdrop) {
      backdrop.parentNode.removeChild(backdrop);
    });
  }
</script> %>

<%# <script>
  document.addEventListener('DOMContentLoaded', function() {
    var settingsModal = document.getElementById('settingsModal');

    // イベントリスナーを削除してから追加
    settingsModal.removeEventListener('hidden.bs.modal', handleModalClose);
    settingsModal.addEventListener('hidden.bs.modal', handleModalClose);

    // モーダルが存在する場合のみ処理を行う
    if (settingsModal) {
      var modal = new bootstrap.Modal(settingsModal);

      // モーダルが開いている場合は閉じる
      if (settingsModal.classList.contains('show')) {
        modal.hide();
      }
    }
  });

  window.addEventListener('popstate', function() {
    var settingsModal = document.getElementById('settingsModal');
    if (settingsModal) {
      var modal = bootstrap.Modal.getInstance(settingsModal);
      if (modal) {
        modal.hide();
        // バックドロップが残っている場合は削除
        removeBackdrop();
      }
    }
  });

  // Turboがキャッシュする前にモーダルを閉じる
  document.addEventListener('turbo:before-cache', function() {
    var settingsModal = document.getElementById('settingsModal');
    if (settingsModal) {
      var modal = bootstrap.Modal.getInstance(settingsModal);
      if (modal) {
        modal.hide();
        // バックドロップが残っている場合は削除
        removeBackdrop();
      }
    }
  });

  function handleModalClose() {
    // ここでバックドロップなどの処理を行う
    removeBackdrop();
  }

  function removeBackdrop() {
    var backdrops = document.querySelectorAll('.modal-backdrop');
    backdrops.forEach(function(backdrop) {
      backdrop.parentNode.removeChild(backdrop);
    });
  }
</script> %>




